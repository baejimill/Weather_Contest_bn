package com.ruby.config.filter;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.log;

import java.io.IOException;

import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ruby.domain.Member;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class JWTAuthenticationFilter extends UsernamePasswordAuthenticationFilter {
// 인증 객체
private final AuthenticationManager authenticationManager;
// POST/login 요청이 왔을 때 인증을 시도하는 메소드
@Override
public Authentication attemptAuthentication(HttpServletRequest request,
HttpServletResponse response) throws AuthenticationException{
	 // request에서 json 타입의 [name/password]를 읽어서 Member 객체를 생성한다.
	 ObjectMapper mapper = new ObjectMapper();
	 try {
	 Member member = mapper.readValue(request.getInputStream(), Member.class);
	 // Security에게 자격 증명 요청에 필요한 객체 생성
	Authentication authToken = new UsernamePasswordAuthenticationToken(
	 member.getEmail(), member.getPassword());
	 // 인증 진행-> UserDetailsService의 loadUserByUsername에서 DB로부터 사용자 정보를 읽어온 뒤
	// 사용자 입력 정보와 비교한 뒤 자격 증명에 성공하면 Authenticaiton객체를 만들어서 리턴한다.
	 return auth = authenticationManager.authenticate(authToken);
	 } catch (Exception e) {
	 log.info(e.getMessage()); // “자격 증명에 실패하였습니다.” 로그 출력
	}
	 response.setStatus(HttpStatus.UNAUTHORIZED.value());
	 return null;
	 // 자격 증명에 실패하면 응답코드 리턴
	 }


// 인증이 성공했을 때 실행되는 후처리 메소드
@Override
protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, 
FilterChain chain, Authentication authResult) throws IOException, ServletException {
	 // request에서 json 타입의 [username/password]를 읽어서 Member 객체를 생성한다.
	 ObjectMapper mapper = new ObjectMapper();
	 try {
	 Member member = mapper.readValue(request.getInputStream(), Member.class);
	 // Security에게 자격 증명 요청에 필요한 객체 생성
	Authentication authToken = new UsernamePasswordAuthenticationToken(
	 member.getEmail(), member.getPassword());
	 // 인증 진행-> UserDetailsService의 loadUserByUsername에서 DB로부터 사용자 정보를 읽어온 뒤
	// 사용자 입력 정보와 비교한 뒤 자격 증명에 성공하면 Authenticaiton객체를 만들어서 리턴한다.
	 return auth = authenticationManager.authenticate(authToken);
	 } catch (Exception e) {
	 log.info(e.getMessage()); // “자격 증명에 실패하였습니다.” 로그 출력
	}
	 response.setStatus(HttpStatus.UNAUTHORIZED.value());
	 return null;
	 // 자격 증명에 실패하면 응답코드 리턴
	
	 }

}
